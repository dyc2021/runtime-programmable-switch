# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from p4.bm import dataplane_interface_pb2 as p4_dot_bm_dot_dataplane__interface__pb2


class DataplaneInterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PacketStream = channel.stream_stream(
                '/p4.bm.DataplaneInterface/PacketStream',
                request_serializer=p4_dot_bm_dot_dataplane__interface__pb2.PacketStreamRequest.SerializeToString,
                response_deserializer=p4_dot_bm_dot_dataplane__interface__pb2.PacketStreamResponse.FromString,
                )
        self.SetPortOperStatus = channel.unary_unary(
                '/p4.bm.DataplaneInterface/SetPortOperStatus',
                request_serializer=p4_dot_bm_dot_dataplane__interface__pb2.SetPortOperStatusRequest.SerializeToString,
                response_deserializer=p4_dot_bm_dot_dataplane__interface__pb2.SetPortOperStatusResponse.FromString,
                )


class DataplaneInterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PacketStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPortOperStatus(self, request, context):
        """A one-way RPC to set the operational status of a given port (by default all
        ports are valid and "UP"). This is useful in the context of testing, to
        simulate port-up / port-down events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataplaneInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PacketStream': grpc.stream_stream_rpc_method_handler(
                    servicer.PacketStream,
                    request_deserializer=p4_dot_bm_dot_dataplane__interface__pb2.PacketStreamRequest.FromString,
                    response_serializer=p4_dot_bm_dot_dataplane__interface__pb2.PacketStreamResponse.SerializeToString,
            ),
            'SetPortOperStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPortOperStatus,
                    request_deserializer=p4_dot_bm_dot_dataplane__interface__pb2.SetPortOperStatusRequest.FromString,
                    response_serializer=p4_dot_bm_dot_dataplane__interface__pb2.SetPortOperStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'p4.bm.DataplaneInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataplaneInterface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PacketStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/p4.bm.DataplaneInterface/PacketStream',
            p4_dot_bm_dot_dataplane__interface__pb2.PacketStreamRequest.SerializeToString,
            p4_dot_bm_dot_dataplane__interface__pb2.PacketStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPortOperStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p4.bm.DataplaneInterface/SetPortOperStatus',
            p4_dot_bm_dot_dataplane__interface__pb2.SetPortOperStatusRequest.SerializeToString,
            p4_dot_bm_dot_dataplane__interface__pb2.SetPortOperStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
